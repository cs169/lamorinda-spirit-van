name: CI

# Trigger workflows on push and pull_request
on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  scan_ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  scan_js:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bin/importmap audit

  rspec_cucumber:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Ruby (3.4)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
      - name: Build
        run: |
          gem install bundler
          bundle install --jobs 4 --retry 3
          bundle exec rake db:create
          bundle exec rake db:migrate
          bundle exec rake db:test:prepare

      - name: Install Chrome & Chromedriver
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get -f install -y
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+\.\d+')
          wget -O chromedriver.zip "https://storage.googleapis.com/chrome-for-testing-public/$CHROME_VERSION/linux64/chromedriver-linux64.zip"
          unzip chromedriver.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Run rspec Tests
        env:
          RAILS_ENV: test
        run: bundle exec rspec

      - name: Run cucumber Tests
        env:
          RAILS_ENV: test
        run: bundle exec cucumber

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Download and install Code Climate test reporter
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

      - name: Run before-build command
        run: ./cc-test-reporter before-build

      - name: Run after-build command
        run: |
          ./cc-test-reporter after-build --exit-code $? --coverage-input-type simplecov
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

  build_docs:
    runs-on: ubuntu-latest
    needs: rspec_cucumber

    # Only run this job when files under `docs/` have changed
    if: ${{ github.event_name == 'push' && contains(join(github.event.commits.*.modified, ',') , 'docs/') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby for building Jekyll docs
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.1'
          bundler-cache: true
          working-directory: docs

      - name: Install Jekyll dependencies
        run: |
          cd docs
          bundle install

      - name: Build Jekyll Docs
        run: |
          cd docs
          bundle exec jekyll build
        env:
          JEKYLL_ENV: production

      # ⬇️ Push built `_site` folder to the `gh-pages` branch
      - name: Deploy to gh-pages branch
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git fetch origin gh-pages || git checkout --orphan gh-pages
          git switch gh-pages || git checkout -b gh-pages
          git rm -rf . > /dev/null 2>&1 || true
          cp -r docs/_site/* .
          touch .nojekyll  # prevent GitHub Pages from ignoring folders that start with `_`
          git add .
          git commit -m "Deploy Jekyll site from docs/"
          git push -f origin gh-pages
