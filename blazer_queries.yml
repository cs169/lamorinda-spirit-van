---
- :name: Rides By City, Ride_Type
  :description: ''
  :statement: "SELECT\r\n    addresses.city AS \"City\",\r\n    COUNT(rides.id) AS
    ride_count,\r\n    COALESCE(NULLIF(rides.ride_type, ''), '(None)') AS ride_type,\r\n
    \   ROUND(\r\n        (COUNT(rides.id) * 100.0 / SUM(COUNT(rides.id)) OVER()),\r\n
    \       2\r\n    ) AS percentage\r\nFROM\r\n    rides\r\nINNER JOIN\r\n    passengers
    ON rides.passenger_id = passengers.id\r\nINNER JOIN\r\n    addresses ON passengers.address_id
    = addresses.id\r\nWHERE\r\n    rides.date >= {start_time} AND rides.date
    <= {end_time}\r\nGROUP BY\r\n    addresses.city,\r\n    COALESCE(NULLIF(rides.ride_type,
    ''), '(None)')\r\nORDER BY\r\n    \"City\",\r\n    ride_count DESC"
  :data_source: main
- :name: Passenger Trips By City
  :description: ''
  :statement: "SELECT *\r\nFROM (\r\n    SELECT 'Lafayette' AS city, passengers.name,
    STRFTIME('%Y-%m', rides.date) AS year_month, COUNT(*) AS ride_count\r\n
    \   FROM rides\r\n    JOIN passengers ON rides.passenger_id = passengers.id\r\n
    \   JOIN addresses ON passengers.address_id = addresses.id\r\n    WHERE rides.date
    >= {start_time} \r\n      AND rides.date <= {end_time}\r\n      AND addresses.city
    = 'Lafayette'\r\n    GROUP BY passengers.name, year_month\r\n    \r\n    UNION
    ALL\r\n    \r\n    SELECT 'Moraga' AS city, passengers.name, STRFTIME('%Y-%m',
    rides.date) AS year_month, COUNT(*) AS ride_count\r\n    FROM rides\r\n
    \   JOIN passengers ON rides.passenger_id = passengers.id\r\n    JOIN addresses
    ON passengers.address_id = addresses.id\r\n    WHERE rides.date >= {start_time}
    \r\n      AND rides.date <= {end_time}\r\n      AND addresses.city =
    'Moraga'\r\n    GROUP BY passengers.name, year_month\r\n    \r\n    UNION ALL\r\n
    \   \r\n    SELECT 'Orinda' AS city, passengers.name, STRFTIME('%Y-%m', rides.date)
    AS year_month, COUNT(*) AS ride_count\r\n    FROM rides\r\n    JOIN passengers
    ON rides.passenger_id = passengers.id\r\n    JOIN addresses ON passengers.address_id
    = addresses.id\r\n    WHERE rides.date >= {start_time} \r\n      AND
    rides.date <= {end_time}\r\n      AND addresses.city = 'Orinda'\r\n    GROUP
    BY passengers.name, year_month\r\n)\r\nORDER BY city, name, year_month;"
  :data_source: main
- :name: Fare by Passengers
  :description: The total sum of fare paid by passengers on rides starting and ending
    on selected time
  :statement: "SELECT \r\n  passengers.name, \r\n  CONCAT('$', ROUND(SUM(rides.amount_paid),
    2)) AS total_fare\r\nFROM rides\r\nJOIN passengers ON rides.passenger_id = passengers.id\r\nWHERE
    rides.date >= {start_time} \r\n  AND rides.date <= {end_time}\r\n
    \ AND rides.next_ride_id IS NULL\r\nGROUP BY passengers.name"
  :data_source: main
- :name: Foundation Report
  :description: Total Low Income Passengers, Total Passengers, % Low Income Passengers,
    Total Low Income Rides, Total Rides, % Low Income Rides
  :statement: "SELECT\r\n  COUNT(DISTINCT passengers.id) FILTER (WHERE passengers.low_income
    IS TRUE) AS \"Total Low Income Passengers\",\r\n  COUNT(DISTINCT passengers.id)
    AS \"Total Passengers\",\r\n  ROUND(\r\n    COUNT(DISTINCT passengers.id) FILTER
    (WHERE passengers.low_income IS TRUE) * 100.0 / NULLIF(COUNT(DISTINCT passengers.id),
    0), \r\n    2\r\n  ) AS \"% Low Income Passengers\",\r\n  COUNT(*) FILTER (WHERE
    passengers.low_income IS TRUE) AS \"Low Income Rides\",\r\n  COUNT(*) AS \"Total
    Rides\",\r\n  ROUND(\r\n    COUNT(*) FILTER (WHERE passengers.low_income IS TRUE)
    * 100.0 / NULLIF(COUNT(*), 0), \r\n    2\r\n  ) AS \"% Low Income Rides\"\r\nFROM
    rides\r\nJOIN passengers ON rides.date = passengers.id\r\nWHERE rides.date
    >= {start_time} AND rides.date <= {end_time};"
  :data_source: main
- :name: 5310 Report
  :description: ''
  :statement: "WITH rides_stats AS (\r\n    SELECT \r\n        van AS \"Van\", \r\n
    \       COUNT(DISTINCT STRFTIME('%Y-%m-%d', date)) AS \"Days Used\",\r\n
    \       ROUND(SUM(hours), 1) AS \"Service Hours\",\r\n        COUNT(CASE \r\n
    \           WHEN passengers.wheelchair IS TRUE \r\n                AND passengers.need_caregiver
    IS TRUE \r\n                THEN 1 END) AS \"Wheelchair with Caregiver\",\r\n
    \       COUNT(CASE \r\n            WHEN passengers.wheelchair IS TRUE \r\n                AND
    passengers.need_caregiver IS FALSE \r\n                THEN 1 END) AS \"Wheelchair
    without Caregiver\",\r\n        COUNT(CASE \r\n            WHEN \r\n                passengers.wheelchair
    IS FALSE \r\n                AND passengers.disabled IS TRUE \r\n                THEN
    1 END) AS \"Disabled\",\r\n        COUNT(CASE \r\n            WHEN \r\n                passengers.disabled
    IS FALSE \r\n                    AND passengers.wheelchair IS FALSE\r\n                    THEN
    1 END) AS \"Seniors\",\r\n        COUNT(CASE WHEN passengers.need_caregiver IS
    TRUE THEN 1 END) AS \"Trips with Caregivers\"\r\n    FROM rides \r\n    JOIN passengers
    ON rides.passenger_id = passengers.id\r\n    WHERE rides.date >= {start_time}
    AND rides.date <= {end_time}\r\n    GROUP BY van\r\n), \r\n-- Formula
    on the 5310 form -- \r\nrides_stats_2 AS (\r\n    SELECT *,\r\n        SUM(\"Wheelchair
    with Caregiver\" + \"Wheelchair without Caregiver\" + \"Disabled\" + \"Seniors\")
    OVER (PARTITION BY \"Van\") AS \"Total Trips w/o Caregivers\"\r\n    FROM rides_stats\r\n)\r\n\r\nSELECT
    *, SUM(\"Trips with Caregivers\" + \"Total Trips w/o Caregivers\") OVER (PARTITION
    BY \"Van\") AS \"Grand Total\"\r\nFROM rides_stats_2\r\n"
  :data_source: main
- :name: New Passengers
  :description: ''
  :statement: "SELECT a.city, GROUP_CONCAT(p.name, ', ') AS names\r\nFROM passengers
    p JOIN addresses a\r\nON p.address_id = a.id\r\nWHERE p.date_registered >= {start_time}
    AND p.date_registered <= {end_time}\r\nGROUP BY a.city"
  :data_source: main
- :name: 'Service Miles per Van '
  :description: ''
  :statement: "SELECT van, SUM(odometer_post - odometer_pre) AS \"Service Miles\"\r\nFROM
    shifts\r\nWHERE shift_date >= {start_time} AND shift_date <= {end_time}\r\nGROUP
    BY van;"
  :data_source: main
- :name: Master Passenger List
  :description: ''
  :statement: SELECT * FROM PASSENGERS;
  :data_source: main
- :name: 'Rides Manifest '
  :description: Rides starting and ending from the selected time. Each row is one
    ride, so multi-stop rides span across mutiple rows. Keep in mind that amount_paid
    is the total of the multi-stop, but are displayed across each "stop"
  :statement: "SELECT \r\n    rides.id,\r\n    strftime('%Y-%m-%d %I:%M %p', datetime(rides.date,
    '-8 hours')) as Datetime,\r\n    passengers.name as Passenger,\r\n    drivers.name
    as Driver,\r\n    start_addr.street || ', ' || start_addr.city || CASE WHEN start_addr.zip_code
    IS NOT NULL THEN ', ' || start_addr.zip_code ELSE '' END as Pickup,\r\n    dest_addr.street
    || ', ' || dest_addr.city || CASE WHEN dest_addr.zip_code IS NOT NULL THEN ',
    ' || dest_addr.zip_code ELSE '' END as Destination,\r\n    rides.ride_type,\r\n
    \   rides.amount_paid,\r\n    rides.status,\r\n    rides.van,\r\n    rides.notes,\r\n
    \   rides.notes_to_driver,\r\n    passengers.wheelchair,\r\n    passengers.low_income,\r\n
    \   passengers.disabled,\r\n    passengers.need_caregiver\r\nFROM rides\r\nLEFT
    JOIN passengers ON rides.passenger_id = passengers.id\r\nLEFT JOIN drivers ON
    rides.driver_id = drivers.id\r\nLEFT JOIN addresses start_addr ON rides.start_address_id
    = start_addr.id\r\nLEFT JOIN addresses dest_addr ON rides.dest_address_id = dest_addr.id\r\nWHERE
    rides.date >= {start_time} \r\n    AND rides.date <= {end_time}\r\nORDER
    BY rides.date DESC;"
  :data_source: main
